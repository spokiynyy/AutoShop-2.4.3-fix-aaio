# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from tgbot.data.loader import dp, bot
from tgbot.filters.filters import IsAdmin
from tgbot.keyboards.inline_admin import (products_edits, back_pr_edits, open_cats_for_add_items,
                                          open_cats_for_add_pod_cat, open_cats_for_add_pos,
                                          open_cats_for_edit, open_cats_for_edit_pod_cat, open_cats_for_edit_pos,
                                          open_pod_cats_for_add_items, open_pod_cats_for_add_pos, edit_cat_inl,
                                          choose_clear_items_pos, choose_del_all_cats, choose_del_all_items,
                                          choose_del_all_pod_cats, choose_del_all_pos, choose_del_cat,
                                          choose_del_pod_cat, choose_del_pos, open_pod_cats_for_edit,
                                          open_pod_cats_for_edit_pos, open_positions_for_add_items,
                                          open_positions_for_edit, update_pod_cat_inl, edit_pos_inl, stop_add_items,
                                          choose_type_position)
from tgbot.data.config import db, currencies
from tgbot.utils.utils_functions import send_admins, get_unix, get_exchange
from tgbot.states.admin import AdminCatsEdit, AdminPodCatsEdit, AdminPosEdit, AdminItemsEdit


@dp.callback_query_handler(IsAdmin(), text="pr_edit", state="*")
async def edits_prods(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.message.edit_text(f"<b>‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å \n‚ûï - –î–æ–±–∞–≤–∏—Ç—å/–°–æ–∑–¥–∞—Ç—å \n‚öôÔ∏è - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å \nüóëÔ∏è - –£–¥–∞–ª–∏—Ç—å</b>", reply_markup=products_edits())


@dp.callback_query_handler(text="add_cat", state="*")
async def add_cat_op(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>", reply_markup=back_pr_edits())
    await AdminCatsEdit.here_name_cat.set()


@dp.message_handler(state=AdminCatsEdit.here_name_cat)
async def here_name_add_cat(msg: Message, state: FSMContext):
    await state.finish()

    name = msg.text
    await db.add_category(name)

    await msg.answer(f"<b>‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <code>{name}</code> –ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>")
    await send_admins(f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} —Å–æ–∑–¥–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{name}</code>!</b>", True)


@dp.callback_query_handler(text="edit_cat", state="*")
async def edit_cat_op(call: CallbackQuery, state: FSMContext):
    await state.finish()
    if len(await db.get_all_categories()) < 1:
        await call.answer(f"‚ùó –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    else:
        await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>", reply_markup=await open_cats_for_edit())


@dp.callback_query_handler(text_startswith="cat_edit:", state="*")
async def edit_cat_ope(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]
    category = await db.get_category(cat_id)

    await call.message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}</b>", reply_markup=edit_cat_inl(cat_id))


@dp.callback_query_handler(text_startswith="edit_cat_name:", state="*")
async def edit_cat_name(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")

    await AdminCatsEdit.here_new_cat_name.set()
    await state.update_data(cache_edit_cat_id=cat_id)


@dp.message_handler(state=AdminCatsEdit.here_new_cat_name)
async def here_edit_name_cat(msg: Message, state: FSMContext):

    async with state.proxy() as data:
        cat_id = data['cache_edit_cat_id']

    await state.finish()
    cat = await db.get_category(cat_id)
    await db.update_category(cat_id=cat_id, name=msg.text)

    await msg.answer(f"<b>‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{msg.text}</code></b>")
    await send_admins(f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å <code>{cat['name']}</code> –Ω–∞ <code>{msg.text}</code>!</b>", True)


@dp.callback_query_handler(text_startswith="del_cat:", state="*")
async def del_cat_op(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>", reply_markup=choose_del_cat(cat_id))


@dp.callback_query_handler(text_startswith="dels_cat:", state="*")
async def del_cat_ope(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    cat_id = call.data.split(":")[2]

    if action == "yes":
        cat = await db.get_category(cat_id=cat_id)
        name = cat['name']
        await db.del_category(cat_id=cat_id)
        await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{name}</code></b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{name}</code>!</b>", True)
    else:
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")


@dp.callback_query_handler(text="del_all_cats", state="*")
async def del_all_cats_op(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–í–°–ï</u> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?</b>", reply_markup=choose_del_all_cats())


@dp.callback_query_handler(text_startswith="dels_all_cat:", state="*")
async def dels_all_cats_choose(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    if action == "yes":
        await db.del_all_cats()
        await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!</b>", True)
    else:
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>")


#############################################################################
########################        –ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏        ########################
#############################################################################

@dp.callback_query_handler(text="add_pod_cat", state="*")
async def add_cat_opee(call: CallbackQuery, state: FSMContext):
    await state.finish()

    if len(await db.get_all_categories()) < 1:
        await call.answer(f"‚ùó –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    else:
        await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>", reply_markup=await open_cats_for_add_pod_cat())


@dp.callback_query_handler(text_startswith="add_pod_cat_cat:", state="*")
async def add_cat_openn(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]
    await state.update_data(cache_cat_id_for_pod_cat=cat_id)

    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>", reply_markup=back_pr_edits())
    await AdminPodCatsEdit.here_name_pod_cat.set()


@dp.message_handler(state=AdminPodCatsEdit.here_name_pod_cat)
async def here_name_add_cat(msg: Message, state: FSMContext):

    async with state.proxy() as data:
        cat_id = data['cache_cat_id_for_pod_cat']

    await state.finish()

    name = msg.text
    await db.add_pod_category(name, cat_id)

    await msg.answer(f"<b>‚úÖ –ü–æ–¥-–ö–∞—Ç–µ–≥–æ—Ä–∏—è <code>{name}</code> –ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>")
    await send_admins(
        f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} —Å–æ–∑–¥–∞–ª –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{msg.text}</code>!</b>", True)


@dp.callback_query_handler(text="edit_pod_cat", state="*")
async def edit_cat_op(call: CallbackQuery, state: FSMContext):
    await state.finish()

    if len(await db.get_all_pod_categories()) < 1:
        await call.answer(f"‚ùó –ù–µ—Ç –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    else:
        if len(await db.get_all_categories()) < 1:
            await call.answer(f"‚ùó –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        else:
            await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>", reply_markup=await open_cats_for_edit_pod_cat())


@dp.callback_query_handler(text_startswith="pods_cat_edit:", state="*")
async def pods_cat_edittt(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]
    await state.update_data(cache_cat_id_for_edit_pod_cat=cat_id)

    if len(await db.get_pod_categories(cat_id)) < 1:
        await call.answer(f"‚ùó –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
    else:
        await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>", reply_markup=await open_pod_cats_for_edit(cat_id))


@dp.callback_query_handler(text_startswith="podss_cat_edit:", state="*")
async def podss_cat_editt(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]

    pod_cat = await db.get_pod_category(pod_cat_id)
    cat = await db.get_category(pod_cat['cat_id'])

    await call.message.answer(f"<b>üíé –ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{pod_cat['name']}</code> \n‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{cat['name']}</code></b>", reply_markup=update_pod_cat_inl(pod_cat_id))


@dp.callback_query_handler(text_startswith="edit_pod_cat_name:", state="*")
async def edit_pod_cat_name(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]
    await state.update_data(cache_pod_cat_id_for_edit_name=pod_cat_id)

    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")
    await AdminPodCatsEdit.here_new_name_for_pod_cat.set()


@dp.message_handler(state=AdminPodCatsEdit.here_new_name_for_pod_cat)
async def here_new_name_pod_cat(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pod_cat_id = data['cache_pod_cat_id_for_edit_name']

    await state.finish()
    cat = await db.get_pod_category(pod_cat_id)
    await db.update_pod_category(pod_cat_id=pod_cat_id, name=msg.text)

    await msg.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ <code>{msg.text}</code></b>")
    await send_admins(
        f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª –∏–º—è –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å <code>{cat['name']}</code> –Ω–∞ <code>{msg.text}</code>!</b>", True)


@dp.callback_query_handler(text_startswith="del_pod_cat:", state="*")
async def del_pod_cat(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]

    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>", reply_markup=choose_del_pod_cat(pod_cat_id))


@dp.callback_query_handler(text_startswith="dels_pod_cat:", state='*')
async def del_pod_cat_yes_no(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    pod_cat_id = call.data.split(":")[2]

    if action == "yes":
        pod_cat = await db.get_pod_category(pod_cat_id)
        await db.del_pod_category(pod_cat_id)
        await call.message.answer(f"<b>‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{pod_cat['name']}</code></b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é <code>{pod_cat['name']}</code>!</b>", True)
    else:
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")


@dp.callback_query_handler(text="del_all_pod_cats", state="*")
async def del_all_pods_cats(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–í–°–ï</u> –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏?</b>",
                            reply_markup=choose_del_all_pod_cats())


@dp.callback_query_handler(text_startswith="dels_all_pod_cats:", state="*")
async def dels_all_cats_choose(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    if action == "yes":
        await db.del_all_pod_cats()
        await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –í–°–ï –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏!</b>", True)
    else:
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>")


########################################################################################
############################         –ü–æ–∑–∏—Ü–∏–∏         ###################################
########################################################################################
@dp.callback_query_handler(text="add_pos", state="*")
async def add_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏</b>", reply_markup=await open_cats_for_add_pos())


@dp.callback_query_handler(text_startswith="add_pos_cat:", state="*")
async def add_posss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    if len(await db.get_pod_categories(cat_id)) != 0:
        await call.message.answer(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ò–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏</b>",
                                reply_markup=await open_pod_cats_for_add_pos(cat_id))
    else:
        await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
        await AdminPosEdit.here_name_add_pos.set()
        await state.update_data(cache_cat_id_for_add_pos=cat_id)
        await state.update_data(cache_pod_cat_id_for_add_pos=None)


@dp.callback_query_handler(text_startswith="add_poss_cat:", state="*")
async def add_possss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_name_add_pos.set()
    await state.update_data(cache_cat_id_for_add_pos=cat_id)
    await state.update_data(cache_pod_cat_id_for_add_pos=None)


@dp.callback_query_handler(text_startswith="pod_cat_add_pos:", state="*")
async def add_poss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]
    cat_id = call.data.split(":")[2]

    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_name_add_pos.set()
    await state.update_data(cache_pod_cat_id_for_add_pos=pod_cat_id)
    await state.update_data(cache_cat_id_for_add_pos=cat_id)


@dp.message_handler(state=AdminPosEdit.here_name_add_pos)
async def here_name_addd_pos(msg: Message, state: FSMContext):
    name = msg.text

    await msg.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_price_add_pos.set()
    await state.update_data(cache_name_add_pos=name)


@dp.message_handler(state=AdminPosEdit.here_price_add_pos)
async def here_name_addd_pos(msg: Message, state: FSMContext):
    if msg.text.isdigit() or msg.text.replace(".", "").isdigit():
        price = float(msg.text)
        await msg.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ \n\n<u>‚Äº –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</u> –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!!!</b>",
                         reply_markup=choose_type_position())
        await AdminPosEdit.here_type_add_pos.set()
        await state.update_data(cache_price_add_pos=price)
    else:
        await msg.answer(f"<b>‚ùó –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")


@dp.callback_query_handler(text_startswith="position_type:", state=AdminPosEdit.here_type_add_pos)
async def position_type_add_pos(call: CallbackQuery, state: FSMContext):
    _type = call.data.split(":")[1]
    await AdminPosEdit.here_desc_add_pos.set()
    await state.update_data(cache_type_add_pos=_type)
    await call.message.edit_text(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ \n–ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code></b>")


@dp.message_handler(state=AdminPosEdit.here_desc_add_pos)
async def here_name_addd_pos(msg: Message, state: FSMContext):
    desc = msg.parse_entities(as_html=True)

    if desc == "-":
        desc = "<code>‚ùó –ù–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</code>"

    await msg.answer(f"<b>‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ \n–ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code></b>")
    await AdminPosEdit.here_photo_add_pos.set()
    await state.update_data(cache_desc_add_pos=desc)


@dp.message_handler(state=AdminPosEdit.here_photo_add_pos, content_types=['photo'])
@dp.message_handler(state=AdminPosEdit.here_photo_add_pos, text='-')
async def here_name_addd_pos(msg: Message, state: FSMContext):

    if msg.text == "-":
        photo = "-"
    else:
        photo = msg.photo[-1].file_id

    await msg.answer(f"<b>‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>+</code> –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± —Ç–æ–≤–∞—Ä –±—ã–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º \n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ <code>-</code></b>")
    await AdminPosEdit.here_infinity_add_pos.set()
    await state.update_data(cache_photo_add_pos=photo)


@dp.message_handler(state=AdminPosEdit.here_infinity_add_pos, text=['+', '-'])
async def here_name_addd_pos(msg: Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            cat_id = data['cache_cat_id_for_add_pos']
            pod_cat_id = data['cache_pod_cat_id_for_add_pos']
            name = data['cache_name_add_pos']
            price = data['cache_price_add_pos']
            desc = data['cache_desc_add_pos']
            photo = data['cache_photo_add_pos']
            _type = data['cache_type_add_pos']

        infinity = msg.text

        settings = await db.get_settings()
        price_rub, price_dollar, price_euro = 0, 0, 0
        if settings['currency'] == 'rub':
            price_rub = price
            price_euro = await get_exchange(price_rub, 'RUB', 'EUR')
            price_dollar = await get_exchange(price_rub, 'RUB', 'USD')
        elif settings['currency'] == 'usd':
            price_dollar = price
            price_euro = await get_exchange(price_dollar, 'USD', 'EUR')
            price_rub = await get_exchange(price_dollar, 'USD', 'RUB')
        elif settings['currency'] == 'eur':
            price_euro = price
            price_dollar = await get_exchange(price_euro, 'EUR', 'USD')
            price_rub = await get_exchange(price_euro, 'EUR', 'RUB')

        cat = await db.get_category(cat_id)
        pos_id = get_unix(True)
        curr = currencies[settings['currency']]['sign']
        if pod_cat_id is not None:
            await db.add_position(_type, name, price_rub, price_dollar, price_euro, desc, photo, cat_id, infinity, pos_id, pod_cat_id)
            pod_cat = await db.get_pod_category(pod_cat_id)
            msgg = f"""
<b>üíé –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{cat['name']}</code>
üé≤ –ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{pod_cat['name']}</code>
‚öôÔ∏è –ü–æ–∑–∏—Ü–∏—è: <code>{name}</code>
üí∞ –¶–µ–Ω–∞: <code>{price}{curr}</code>
‚≠ê –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ç–æ–≤–∞—Ä: <code>{infinity}</code>
üõí –¢–∏–ø: <code>{_type}</code>
üíö –û–ø–∏—Å–∞–Ω–∏–µ: <code>{desc}</code></b>
                    """
            await send_admins(
                f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} —Å–æ–∑–¥–∞–ª –ø–æ–∑–∏—Ü–∏—é: \n{msgg}</b>", True
            )
        else:
            await db.add_position(_type, name, price_rub, price_dollar, price_euro, desc, photo, cat_id, infinity, pos_id)
            msgg = f"""
<b>üíé –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{cat['name']}</code>
‚öôÔ∏è –ü–æ–∑–∏—Ü–∏—è: <code>{name}</code>
üí∞ –¶–µ–Ω–∞: <code>{price}{curr}</code>
‚≠ê –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ç–æ–≤–∞—Ä: <code>{infinity}</code>
üõí –¢–∏–ø: <code>{_type}</code>
üíö –û–ø–∏—Å–∞–Ω–∏–µ: <code>{desc}</code></b>
            """
            await send_admins(
                f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} —Å–æ–∑–¥–∞–ª –ø–æ–∑–∏—Ü–∏—é: \n{msgg}</b>", True
            )
        if photo == "-":
            await msg.answer(msgg, reply_markup=edit_pos_inl(pos_id))
        else:
            await bot.send_photo(chat_id=msg.from_user.id, photo=photo, caption=msgg, reply_markup=edit_pos_inl(pos_id))
    except Exception as err:
        print(err)


@dp.callback_query_handler(IsAdmin(), text='edit_pos', state="*")
async def edit_pos_choose(call: CallbackQuery, state: FSMContext):
    await state.finish()

    if len(await db.get_all_categories()) < 1:
        await call.answer("‚ùó –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
    else:
        if len(await db.get_all_positions()) < 1:
            await call.answer("‚ùó –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        else:
            await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:</b>", reply_markup=await open_cats_for_edit_pos())


@dp.callback_query_handler(text_startswith="edit_pos_cat:", state="*")
async def edit_pos_open(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    if len(await db.get_pod_categories(cat_id)) != 0:
        await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ò–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏</b>",
                                reply_markup=await open_pod_cats_for_edit_pos(cat_id))
    else:
        await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>", reply_markup=await open_positions_for_edit(cat_id))


@dp.callback_query_handler(text_startswith="pod_cat_edit_pos:", state='*')
async def edit_pos_pod_cat(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]
    cat_id = call.data.split(":")[2]

    await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
                                 reply_markup=await open_positions_for_edit(cat_id, pod_cat_id))


@dp.callback_query_handler(text_startswith="edit_pos:", state="*")
async def edit_pos_open_(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]
    pos = await db.get_position(pos_id)
    cat = await db.get_category(pos['category_id'])
    _type = pos['type']
    items = f"{len(await db.get_items(position_id=pos_id))}—à—Ç"
    settings = await db.get_settings()
    if settings['currency'] == 'rub':
        cur = 'rub'
        price = pos['price_rub']
    elif settings['currency'] == 'usd':
        cur = 'usd'
        price = pos['price_dollar']
    elif settings['currency'] == 'eur':
        cur = 'eur'
        price = pos['price_euro']

    curr = currencies[cur]['sign']

    if pos['infinity'] == "+":
        items = "–ë–µ–∑–ª–∏–º–∏—Ç"

    msg = f"""
<b>üíé –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{cat['name']}</code>
‚öôÔ∏è Ô∏è–ü–æ–∑–∏—Ü–∏—è: <code>{pos['name']}</code>
üí∞ –¶–µ–Ω–∞: <code>{price}{curr}</code>
üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{items}</code>
üõí –¢–∏–ø: <code>{_type}</code>
‚≠ê –û–ø–∏—Å–∞–Ω–∏–µ:
{pos['description']}</b>
    """

    if pos['pod_category_id'] is not None:
        pod_cat = await db.get_pod_category(pos['pod_category_id'])
        msg = f"""
<b>üíé –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{cat['name']}</code>
üíö –ü–æ–¥-–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{pod_cat['name']}</code>
‚öôÔ∏è –ü–æ–∑–∏—Ü–∏—è: <code>{pos['name']}</code>
üí∞ –¶–µ–Ω–∞: <code>{price}{curr}</code>
üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{items}</code>
üõí –¢–∏–ø: <code>{_type}</code>
‚≠ê –û–ø–∏—Å–∞–Ω–∏–µ:
{pos['description']}</b>
            """

    if pos['photo'] == "-":
        await call.message.edit_text(msg, reply_markup=edit_pos_inl(pos_id))
    else:
        await bot.send_photo(chat_id=call.from_user.id, photo=pos['photo'], caption=msg, reply_markup=edit_pos_inl(pos_id))


@dp.callback_query_handler(text_startswith="edit_price_pos:", state="*")
async def edit_price_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_new_price_pos.set()
    await state.update_data(cache_pos_id_for_edit_price=pos_id)


@dp.callback_query_handler(text_startswith="edit_name_pos:", state="*")
async def edit_price_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_new_name_pos.set()
    await state.update_data(cache_pos_id_for_edit_name=pos_id)


@dp.callback_query_handler(text_startswith="edit_desc_pos:", state="*")
async def edit_price_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_new_desc_pos.set()
    await state.update_data(cache_pos_id_for_edit_desc=pos_id)


@dp.callback_query_handler(text_startswith="edit_photo_pos:", state="*")
async def edit_price_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>")
    await AdminPosEdit.here_new_photo_pos.set()
    await state.update_data(cache_pos_id_for_edit_photo=pos_id)


@dp.callback_query_handler(text_startswith="edit_infinity_pos:", state="*")
async def edit_price_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>+</code> –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± —Ç–æ–≤–∞—Ä –±—ã–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º \n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ–¥–∏—Ç–µ <code>-</code></b>")
    await AdminPosEdit.here_new_infinity_pos.set()
    await state.update_data(cache_pos_id_for_edit_infinity=pos_id)


@dp.message_handler(state=AdminPosEdit.here_new_price_pos)
async def here_new_price(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_edit_price']
    if msg.text.isdigit():

        await state.finish()
        settings = await db.get_settings()

        price_rub, price_dollar, price_euro = 0, 0, 0
        if settings['currency'] == 'rub':
            price_rub = float(msg.text)
            price_euro = await get_exchange(price_rub, 'RUB', 'EUR')
            price_dollar = await get_exchange(price_rub, 'RUB', 'USD')
        elif settings['currency'] == 'usd':
            price_dollar = float(msg.text)
            price_euro = await get_exchange(price_dollar, 'USD', 'EUR')
            price_rub = await get_exchange(price_dollar, 'USD', 'RUB')
        elif settings['currency'] == 'eur':
            price_euro = float(msg.text)
            price_dollar = await get_exchange(price_euro, 'EUR', 'USD')
            price_rub = await get_exchange(price_euro, 'EUR', 'RUB')

        if settings['currency'] == 'rub':
            await db.update_position(pos_id, price_rub=price_rub, price_dollar=price_dollar, price_euro=price_euro)
        elif settings['currency'] == 'usd':
            await db.update_position(pos_id, price_rub=price_rub, price_dollar=price_dollar, price_euro=price_euro)
        elif settings['currency'] == 'eur':
            await db.update_position(pos_id, price_rub=price_rub, price_dollar=price_dollar, price_euro=price_euro)

        curr = currencies[settings['currency']]['sign']
        await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>{msg.text}{curr}</code></b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>{msg.text}{curr}</code></b>", True
        )
    else:
        await msg.answer(f"<b>‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")


@dp.message_handler(state=AdminPosEdit.here_new_name_pos)
async def here_new_price(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_edit_name']

    await state.finish()
    await db.update_position(pos_id, name=msg.text)
    await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>{msg.text}</code></b>")
    await send_admins(
        f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>{msg.text}</code></b>", True
    )


@dp.message_handler(state=AdminPosEdit.here_new_desc_pos)
async def here_new_price(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_edit_desc']

    desc = msg.parse_entities(as_html=True)

    if desc == "-":
        desc = "<code>‚ùó –ù–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</code>"

    await state.finish()
    await db.update_position(pos_id, description=desc)
    await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞</b> \n{desc}")
    await send_admins(
        f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞</b> \n{desc}", True
    )


@dp.message_handler(state=AdminPosEdit.here_new_photo_pos, content_types=['photo'])
@dp.message_handler(state=AdminPosEdit.here_new_photo_pos, text='-')
async def here_new_price(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_edit_photo']

    if msg.text == "-":
        photo = "-"
    else:
        photo = msg.photo[-1].file_id

    await state.finish()
    pos = await db.get_position(pos_id)
    await db.update_position(pos_id, photo=photo)
    if photo == "-":
        await msg.answer(f"<b>‚úÖ –í—ã —É–±—Ä–∞–ª–∏ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏</b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} —É–±—Ä–∞–ª —Ñ–æ—Ç–æ —É –ø–æ–∑–∏—Ü–∏–∏: <code>{pos['name']}</code></b>", True
        )
    else:
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ <code>{pos['name']}</code></b>", True
        )
        await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞</b>")
        await bot.send_photo(chat_id=msg.from_user.id, photo=photo)


@dp.message_handler(state=AdminPosEdit.here_new_infinity_pos, text=['-', '+'])
async def here_new_price(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_edit_infinity']

    await state.finish()
    pos = await db.get_position(pos_id)
    await db.update_position(pos_id, infinity=msg.text)

    if msg.text == "+":
        await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π</code></b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ <code>{pos['name']}</code> –Ω–∞ <code>–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π</code></b>", True
        )
    else:
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{msg.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ <code>{pos['name']}</code> –Ω–∞ <code>–û–±—ã—á–Ω—ã–π</code></b>", True
        )
        await msg.answer(f"<b>‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ <code>–û–±—ã—á–Ω—ã–π</code></b>")


@dp.callback_query_handler(text_startswith="edit_del_pos:", state="*")
async def edit_del_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]
    await call.message.delete()
    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é?</b>", reply_markup=choose_del_pos(pos_id))


@dp.callback_query_handler(text_startswith="dels_pos:", state="*")
async def dels_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    pos_id = call.data.split(":")[2]

    if action == "yes":
        pos = await db.get_position(pos_id)
        await db.del_position(pos_id)
        await call.message.delete()
        await call.message.answer(f"<b>‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é <code>{pos['name']}</code></b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –ø–æ–∑–∏—Ü–∏—é <code>{pos['name']}</code></b>", True
        )
    else:
        await call.message.delete()
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>")


@dp.callback_query_handler(text="del_all_poss", state='*')
async def del_all_poss(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–í–°–ï</u> –ø–æ–∑–∏—Ü–∏–∏?</b>", reply_markup=choose_del_all_pos())


@dp.callback_query_handler(text_startswith="dels_all_poss:", state="*")
async def del_all_posss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]

    if action == "yes":
        await db.del_all_positions()
        await call.message.edit_text(f"<b>‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏</b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –í–°–ï –ø–æ–∑–∏—Ü–∏–∏</b>", True
        )
    else:
        await call.message.edit_text(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π</b>")


@dp.callback_query_handler(text_startswith="edit_clear_items_pos:", state="*")
async def edit_clear_it_pos(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]

    await call.message.delete()
    await call.message.answer(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏?</b>", reply_markup=choose_clear_items_pos(pos_id))


@dp.callback_query_handler(text_startswith="clear_items:", state="*")
async def clear_itemss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]
    pos_id = call.data.split(":")[2]

    if action == "yes":
        await db.remove_item(position_id=pos_id)
        await call.message.delete()
        await call.message.answer(f"<b>‚úÖ –í—ã –æ—á–∏—Å—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏</b>")
    else:
        await call.message.delete()
        await call.message.answer(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —á–∏—Å—Ç–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏</b>")


@dp.callback_query_handler(text_startswith="edit_upload_items_pos:", state='*')
async def edit_upload_items(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pos_id = call.data.split(":")[1]
    pos = await db.get_position(pos_id)
    _type = pos['type']
    msg = ""

    if _type == "text":
        msg = f"""
<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ 
‚ùó –ß—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–∂–¥—É –Ω–∏–º–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É 
‚≠ê –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π, —Ç–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç! (–ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!) –ü—Ä–∏–º–µ—Ä:


<code>–¢–æ–≤–∞—Ä #1...</code>

<code>–¢–æ–≤–∞—Ä #2...</code>

<code>–¢–æ–≤–∞—Ä #3...</code></b>"""
    elif _type == "photo":
        msg = f"""
<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞

‚ùó –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É</b>"""
    elif _type == "file":
        msg = f"""
<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞

‚ùó –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É</b>"""

    await call.message.answer(msg,
        reply_markup=back_pr_edits())

    await state.update_data(cache_pos_id_for_add_items=pos_id)
    await state.update_data(here_count_add_items=0)
    await AdminItemsEdit.here_data_items.set()


########################################################################################
############################          –¢–æ–≤–∞—Ä—ã          ##################################
########################################################################################

@dp.callback_query_handler(IsAdmin(), text='add_items', state="*")
async def edit_pos_choose(call: CallbackQuery, state: FSMContext):
    await state.finish()

    if len(await db.get_all_categories()) < 1:
        await call.answer("‚ùó –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        if len(await db.get_all_positions()) < 1:
            await call.answer("‚ùó –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:</b>", reply_markup=await open_cats_for_add_items())


@dp.callback_query_handler(text_startswith="add_items_cat:", state="*")
async def edit_pos_open(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cat_id = call.data.split(":")[1]

    if len(await db.get_pod_categories(cat_id)) != 0:
        await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ò–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</b>",
                                  reply_markup=await open_pod_cats_for_add_items(cat_id))
    else:
        await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:</b>", reply_markup=await open_positions_for_add_items(cat_id))


@dp.callback_query_handler(text_startswith="pod_cat_add_items:", state='*')
async def edit_pos_pod_cat(call: CallbackQuery, state: FSMContext):
    await state.finish()

    pod_cat_id = call.data.split(":")[1]
    cat_id = call.data.split(":")[2]

    await call.message.edit_text(f"<b>‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                                 reply_markup=await open_positions_for_add_items(cat_id, pod_cat_id))


@dp.callback_query_handler(text_startswith="spos_add_items", state="*")
@dp.callback_query_handler(text_startswith="pos_add_items", state="*")
async def pos_add_items(call: CallbackQuery, state: FSMContext):
    await state.finish()
    pos_id = call.data.split(":")[1]
    pos = await db.get_position(pos_id)
    _type = pos['type']
    msg = ""

    if _type == "text":
        msg = f"""
<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ 
‚ùó –ß—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–∂–¥—É –Ω–∏–º–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É 
‚≠ê –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π, —Ç–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç! (–ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!) –ü—Ä–∏–º–µ—Ä:


<code>–¢–æ–≤–∞—Ä #1...</code>

<code>–¢–æ–≤–∞—Ä #2...</code>

<code>–¢–æ–≤–∞—Ä #3...</code></b>"""
    elif _type == "photo":
        msg = f"""
<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞

‚ùó –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É</b>"""
    elif _type == "file":
        msg = f"""
<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞

‚ùó –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É</b>"""

    await call.message.answer(msg,
                              reply_markup=back_pr_edits())

    await state.update_data(cache_pos_id_for_add_items=pos_id)
    await state.update_data(here_count_add_items=0)
    await AdminItemsEdit.here_data_items.set()


@dp.message_handler(content_types=['photo', 'document'], state=AdminItemsEdit.here_data_items)
@dp.message_handler(state=AdminItemsEdit.here_data_items)
async def here_data_items(message: Message, state: FSMContext):
    cache_msg = await message.answer("<b>‚åõ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è...</b>")
    count_add = 0

    async with state.proxy() as data:
        pos_id = data['cache_pos_id_for_add_items']

    pos = await db.get_position(pos_id)
    _type = pos['type']

    if _type == "text":
        get_all_items = message.text.split("\n\n")
        for check_item in get_all_items:
            if not check_item.isspace() and check_item != "": count_add += 1
        async with state.proxy() as data:
            data['here_count_add_items'] += count_add

        await db.add_item(pos['category_id'], pos['id'], get_all_items, False)
    elif _type == "photo" and message.content_type == "photo":
        file_id = message.photo[-1].file_id
        get_all_items = f"photo:{file_id}"
        count_add += 1
        async with state.proxy() as data:
            data['here_count_add_items'] += count_add
        await db.add_item(pos['category_id'], pos['id'], get_all_items, True)
    elif _type == "file" and message.content_type == "document":
        file_id = message.document.file_id
        get_all_items = f"file:{file_id}"
        count_add += 1
        async with state.proxy() as data:
            data['here_count_add_items'] += count_add
        await db.add_item(pos['category_id'], pos['id'], get_all_items, True)
    else:
        return await cache_msg.edit_text(f"<b>‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞!</b>")

    await cache_msg.edit_text(f"<b>‚úÖ –¢–æ–≤–∞—Ä—ã –≤ –∫–æ–ª-–≤–µ <code>{count_add}—à—Ç</code> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>",
                              reply_markup=stop_add_items())


@dp.callback_query_handler(text="stop_add_items", state="*")
async def product_item_load_finish(call: CallbackQuery, state: FSMContext):
    items = 0

    try:
        async with state.proxy() as data:
            items = data['here_count_add_items']
    except:
        pass

    await state.finish()
    await call.message.edit_text("<b>‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n"
                        f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{items}—à—Ç</code></b>")


@dp.callback_query_handler(text="del_all_items", state="*")
async def del_all_itemss(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.message.edit_text(f"<b>‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <u>–í–°–ï</u> —Ç–æ–≤–∞—Ä—ã?</b>", reply_markup=choose_del_all_items())


@dp.callback_query_handler(text_startswith="dels_all_items:", state="*")
async def dels_all_items(call: CallbackQuery, state: FSMContext):
    await state.finish()

    action = call.data.split(":")[1]

    if action == "yes":
        await db.del_all_items()
        await call.message.edit_text(f"<b>‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã</b>")
        await send_admins(
            f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} —É–¥–∞–ª–∏–ª –í–°–ï —Ç–æ–≤–∞—Ä—ã</b>", True
        )
    else:
        await call.message.edit_text(f"<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤</b>")

